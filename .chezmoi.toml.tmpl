{{- $email := promptStringOnce . "email" "Email address" -}}
{{- $fullName := promptStringOnce . "fullName" "Full name" -}}

{{- $isWorkMachine := promptBoolOnce . "isWorkMachine" "Is this a work machine?" false -}}

{{- $codeDirWork := promptStringOnce . "codeDirWork" "Code dir (work; omit homedir prefix)" "Code/work" -}}
{{- $codeDirNonWork := promptStringOnce . "codeDirNonWork" "Code dir (nonwork; omit homedir prefix)" "Code/nonwork" -}}

{{- $cloneWorkRepos := promptBoolOnce . "cloneWorkRepos" "Clone work git repos" false -}}
{{- $cloneNonWorkRepos := promptBoolOnce . "cloneNonWorkRepos" "Clone NON-work git repos" false -}}

{{- $installFonts := promptBoolOnce . "installFonts" "Install fonts" false -}}

{{- $installExternalBinaries := promptBoolOnce . "installExternalBinaries" "Install external binaries" false -}}
{{- $installAITools := promptBoolOnce . "installAITools" "Install AI tools" false -}}

{{- $glanceWork := promptBoolOnce . "glanceWork" "Display glance work info" false -}}

encryption = "age"

[age]
identity = "~/.config/chezmoi/id.txt"
recipient = "age1zyudjx9v6z07k5d76s3zw2576fcme3nhq2wtvurlxnvznwht39zqagfa7n"

[diff]
command = "delta"
pager = "delta"

[data]
email = {{ $email | quote }}
fullName = {{ $fullName | quote }}

isWorkMachine = {{ $isWorkMachine }}

codeDirWork = {{ $codeDirWork | quote }}
codeDirNonWork = {{ $codeDirNonWork | quote }}

cloneWorkRepos = {{ $cloneWorkRepos }}
cloneNonWorkRepos = {{ $cloneNonWorkRepos }}
installAITools = {{ $installAITools }}
installExternalBinaries = {{ $installExternalBinaries }}
installFonts = {{ $installFonts }}

glanceWork = {{ $glanceWork }}


[data.packages]
arch_ubuntu = [
"acpi",
"age",
"aria2",
"duf",
"fzf",
"htop",
"mkcert",
"mkosi",
"mtr",
"mpv",
"nvtop",
"ripgrep",
"tig",
"tree",
"zoxide",
]

arch = [
"chromium",
"cue",
"dust",
"emacs-wayland",
"fastfetch",
"firefox",
"go",
"gopass",
"imv",
"kubectl",
"kubectx",
"noto-fonts-cjk",
"pandoc-bin",
"swayimg",
"ttf-firacode-nerd",
"ttf-go-nerd",
"ttf-iosevka-nerd",
"ttf-jetbrains-mono-nerd",
"ttf-noto-nerd",
"uv",
"zig",
]

# cmake and libtool{,-bin} are dependencies for emacs vterm
ubuntu = [
"cmake",
"libtool",
"libtool-bin",
"neofetch",
"pandoc",
]

ubuntu_snaps = [
"bun-js",
"deno",
"dust",
"typst",
"vault",
]

ubuntu_snaps_classic = [
"chezmoi",
"emacs",
"ghostty",
"kubectl",
"kubectx",
"node",
"opentofu",
"zig --beta",
]

alpine = [
]

goInstall = [
  "github.com/go-task/task/v3/cmd/task@v3.45.4",
  "github.com/charmbracelet/crush@v0.9.2",
  "github.com/charmbracelet/mods@v1.8.1",
  "github.com/PlakarKorp/plakar@v1.0.5",
  "github.com/PlakarKorp/kapsul@v0.0.0-beta.10",
  "github.com/mikefarah/yq/v4@v4.47.2",
  #"github.com/Jguer/yay/v12@latest",  # FIXME: Only install on arch linux.
]

[data.toolVersion]
aichat = "v0.29.0"
delta = "0.18.2"
duckdb = "v1.4.0"
earthly = "v0.8.15"
fd = "v10.2.0"
llamafile = "0.9.3"
minikube = "v1.37.0"
ohMyPosh = "v27.1.0"
task = "v3.45.4"
uv = "0.8.13"

# Local Variables:
# mode: toml-ts
# End:
