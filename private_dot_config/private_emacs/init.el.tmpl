;;; Emacs

(require 'package)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			 ("nongnu" . "https://elpa.nongnu.org/nongnu/")
			 ("melpa-stable" . "https://stable.melpa.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")))

;; Calling BEFORE use-package is first used, to ensure Emacs knows about the installed packages before trying to load them.
(package-initialize)

(use-package emacs
  :demand
  :init
  (setenv "LC_COLLATE" "C")
  (add-to-list 'exec-path {{quote "~/.local/bin"}})
  (add-to-list 'exec-path {{quote "~/go/bin"}})
  (setopt custom-file (expand-file-name "var/custom.el" user-emacs-directory))

  :config
  (setopt inhibit-splash-screen t)
  (setopt menu-bar-mode nil)
  (setopt scroll-bar-mode nil)
  (setopt tool-bar-mode nil)
  (setopt truncate-lines t)
  (setopt inhibit-startup-echo-area-message user-login-name)

  (if (file-exists-p custom-file)
      (load custom-file))
  )

(use-package no-littering
  :ensure
  :demand
  :config
  (cl-letf (((symbol-function 'etc) #'no-littering-expand-etc-file-name)
	    ((symbol-function 'var) #'no-littering-expand-var-file-name))

    ;; etc: Config Files
    (setopt custom-theme-directory (etc "themes"))
    (setopt emms-source-file-default-directory (etc "emms/"))
    (setq rmh-elfeed-org-files (list (etc "elfeed/rmh-elfeed.org")))
    (setq tempel-path (list (etc "tempel/templates.el")))

    ;; var: Variable Data
    (setopt backup-directory-alist `(("." . ,(var "backups"))))
    (setopt package-user-dir (var "elpa"))
    (setq elfeed-score-rule-stats-file (var "elfeed/score/stats.el"))
    ))

;;; Programming

;;;; magit
(use-package magit :ensure :pin nongnu)

;;;; d2-mode
(use-package d2-mode :ensure)

;;;; cue-mode
(use-package cue-mode
  :ensure
  :config
  (setopt cue-eval-command '("cue" "eval" "-c")))

;;;; go-mode
(use-package go-mode
  :ensure)

;;;; gotest
(use-package gotest
  :ensure
  :pin melpa-stable)

;;;; treesit
(use-package treesit
  :config
  (setq treesit-language-source-alist
	'((bash "https://github.com/tree-sitter/tree-sitter-bash")
	  (cmake "https://github.com/uyha/tree-sitter-cmake")
	  (css "https://github.com/tree-sitter/tree-sitter-css")
	  (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
	  (elisp "https://github.com/Wilfred/tree-sitter-elisp")
	  (go "https://github.com/tree-sitter/tree-sitter-go")
	  (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
	  (html "https://github.com/tree-sitter/tree-sitter-html")
	  (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
	  (json "https://github.com/tree-sitter/tree-sitter-json")
	  (ledger "https://github.com/cbarrete/tree-sitter-ledger")
	  (make "https://github.com/alemuller/tree-sitter-make")
	  (markdown "https://github.com/ikatyang/tree-sitter-markdown")
	  (python "https://github.com/tree-sitter/tree-sitter-python")
	  (toml "https://github.com/tree-sitter/tree-sitter-toml")
	  (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
	  (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
	  (typst "https://github.com/uben0/tree-sitter-typst")
	  (yaml "https://github.com/ikatyang/tree-sitter-yaml"))))

;;;; eglot
(use-package eglot
  :hook ((go-mode go-ts-mode) . eglot-ensure)
  :config
  (add-to-list 'eglot-server-programs '(cue-mode . ("cue" "lsp")))
  )

;;;; flymake
(use-package flymake
  :bind
  (("M-n" . flymake-goto-next-error)
   ("M-p" . flymake-goto-prev-error))
  )

;;;; age
(use-package age
  :ensure
  :demand t
  :config
  (setopt age-default-identity "~/.config/chezmoi/id.txt")
  (setopt age-default-recipient '("age1zyudjx9v6z07k5d76s3zw2576fcme3nhq2wtvurlxnvznwht39zqagfa7n"))
  (age-file-enable))

;;;; editorconfig
(use-package editorconfig
  :ensure
  :pin melpa-stable
  :config
  (setopt editorconfig-mode t))

;;;; yaml-ts-mode
(use-package yaml-ts-mode
  :mode "\\.ya?ml\\'"
  )

;;;; earthfile-mode
(use-package earthfile-mode
  :ensure
  )

;;;; systemd
(use-package systemd
  :ensure
  :pin nongnu)

;;;; templ-ts-mode
(use-package templ-ts-mode :ensure :pin melpa-stable)

;;; Web, Browsers and Multimedia

;;;; elpher
(use-package elpher
  :ensure
  :pin melpa-stable)

;;;; eww
(use-package eww
  :ensure
  :bind
  (("C-c w" . eww)))

;;;; emms
(use-package emms
  :ensure

  :bind
  (("C-c e e" . emms)
   ("C-c e n" . emms-next)
   ("C-c e p" . emms-previous)
   ("C-c e P" . (lambda () (interactive)
		  "Play my preferred EMMS playlist."
		  (emms-play-playlist (expand-file-name "streams-jg.emms" emms-source-file-default-directory))))
   ("C-c e r" . emms-random)
   ("C-c e s" . emms-stop)
   ("C-c e SPC" . emms-pause)
   )

  :config
  (emms-all)
  (setopt emms-player-list '(emms-player-mpv))
  (setopt emms-player-mpv-update-metadata t)
  )

;;;; elfeed
(use-package elfeed :ensure)

;;;; elfeed-org
(use-package elfeed-org
  :ensure
  :config
  (elfeed-org))

;;;; elfeed-score
(use-package elfeed-score :ensure)

;;;; time
(use-package time
  :config
  (setopt display-time-mode t)
  (setopt display-time-format "%a %b %-e %-l:%M%p %Z")
  (setopt world-clock-time-format "%A %B %e %l:%M %p %Z")
  (setopt world-clock-list '(("America/Vancouver" "Vancouver")
			     ("America/Chicago" "Chicago")
			     ("America/Montreal" "Montreal")
			     ("Europe/London" "London")
			     ("Asia/Singapore" "Singapore")
			     )))

;;; Minibuffer & Completion

;;;; vertico
(use-package vertico
  :ensure
  :config
  (setopt vertico-count 20) ;; Show more candidates
  (setopt vertico-resize t) ;; Grow and shrink the Vertico minibuffer
  :init
  (vertico-mode))

;;;; consult
(use-package consult
  :ensure
  :bind
  (("C-x b" . consult-buffer)
   ("M-s b" . consult-buffer)
   ("M-s f" . consult-flymake)
   ("M-s l" . consult-line)
   ("M-s M-o" . consult-outline)
   ("M-s r" . consult-ripgrep)
   ("M-s t" . consult-theme)
   ))

;;;; orderless
(use-package orderless
  :ensure
  :pin melpa-stable
  :config
  (setopt completion-styles '(orderless basic))
  (setopt completion-category-overrides '((file (styles basic partial-completion)))))

;;;; marginalia
(use-package marginalia
  :ensure
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))

;;;; tempel
(use-package tempel
  :disabled
  :ensure
  :pin gnu
  :hook prog-mode
  :init
  (global-tempel-abbrev-mode)
  )

;;; Creative

;;;; denote                                                               :prot:
(use-package denote
  :ensure
  :pin gnu
  :bind
  (("C-c n n" . denote-open-or-create)))

(use-package denote-journal
  :ensure
  :pin gnu
  :bind
  (("C-c n j" . denote-journal-new-or-existing-entry))
  )

;;;; consult-denote
(use-package consult-denote
  :ensure
  :after (consult denote)
  )

;;;; gptel
(use-package gptel
  :ensure

  :bind
  (("C-c SPC SPC" . gptel)
   ("C-c RET" . gptel-send)

   ("C-c SPC m" . gptel-menu)
   ("C-c SPC a" . gptel-add)
   ("C-c SPC f" . gptel-add-file)
   ("C-c SPC r" . gptel-rewrite)
   ("C-c SPC c" . gptel-mcp-connect)
   ("C-c SPC C" . gptel-mcp-disconnect)
   ("C-c SPC t" . gptel-org-set-topic)
   ("C-c SPC s" . gptel-system-prompt)
   )
  
  :config
  (require 'gptel-integrations) ;; provides MCP integration.
  (setopt gptel-default-mode 'org-mode)
  (setopt gptel-org-branching-context t)
  (setopt gptel-prompt-string "* ")

  {{ if .isWorkMachine -}}
  (setopt gptel-model 'gpt-4.1)

  ;; https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models?tabs=global-standard%2Cstandard-chat-completions#model-summary-table-and-region-availability
  (setopt gptel-backend (gptel-make-azure "drw-gpt4.1"
			  :protocol "https"
			  :host "azure-openai.drwcloud.com"
			  :endpoint "/openai/deployments/gpt-4.1/chat/completions?api-version=2025-03-01-preview"
			  :stream t
			  :key "7c67423331a41feb323fd9ff985953e7"
			  :models '("gpt-4.1")))

  (gptel-make-preset 'coding-agent
    :description nil :backend "drw-gpt4.1" :model 'gpt-4.1 :system
    'programming :tools
    '("write_file" "tree" "search_files" "read_multiple_files"
      "read_file" "move_file" "list_directory"
      "list_allowed_directories" "get_file_info" "delete_file"
      "create_directory" "copy_file")
    :stream t :temperature 1.0 :max-tokens nil :use-context 'system
    :include-reasoning t)
  {{ else }}
  ;; See https://ai.google.dev/gemini-api/docs/models#model-variations
  (setopt gptel-model 'gemini-2.5-flash-preview-05-20)
  (setopt gptel-backend (gptel-make-gemini "Gemini"
			  :key "AIzaSyDrCmND1hVl2QH8tUSmlQn2EkYVaMCKNHc"
			  :stream t
			  :models '("gemini-2.5-flash-preview-05-20")))
  {{- end }}
  )


;;;; mcp.el
(use-package mcp
  :after package

  :init
  (unless (package-installed-p 'mcp)
    (package-vc-install "https://github.com/lizqwerscott/mcp.el"))

  (require 'mcp-hub)

  :config
  (setopt mcp-hub-servers
	  '(("filesystem" . (:command "npx" :args ("-y" "@modelcontextprotocol/server-filesystem" ".")))
	    ("filesystemgo" . (:command "go" :args ("run" "github.com/mark3labs/mcp-filesystem-server@v0.10.1" ".")))
            ("fetch" . (:command "uvx" :args ("mcp-server-fetch")))
	    ))
  )

;;;; org
(use-package org
  :ensure
  :pin gnu
  :config
  (setopt org-hide-emphasis-markers t)
  (setopt org-log-into-drawer t)
  )

;;;; markdown-toc
(use-package markdown-toc :ensure)

;;;; ox-gfm
(use-package ox-gfm :ensure)

;;;; todotxt-mode
(use-package todotxt-mode :ensure)

;;; Appearance & Focus

;;;; display-line-numbers-mode                                         :builtin:
(use-package display-line-numbers-mode
  :hook prog-mode
  :config
  (setopt display-line-numbers-type t)
  )

;;;; show-font                                                            :prot:
(use-package show-font :ensure)

;;;; org-modern
(use-package org-modern
  :ensure
  :config
  (setopt global-org-modern-mode t))

;;;; fontaine                                                             :prot:
(use-package fontaine
  :ensure
  :demand

  :bind
  (("C-c f f" . fontaine-set-preset))

  ;; NOTE: To troubleshoot, see M-x list-faces-display
  :config
  (setopt fontaine-presets
	  '(
	    (t

	     :default-family "Monospace"
	     :default-weight regular
	     :default-slant normal
	     :default-width normal
	     :default-height 100

	     :fixed-pitch-family nil
	     :fixed-pitch-weight nil
	     :fixed-pitch-slant nil
	     :fixed-pitch-width nil
	     :fixed-pitch-height 1.0

	     :fixed-pitch-serif-family nil
	     :fixed-pitch-serif-weight nil
	     :fixed-pitch-serif-slant nil
	     :fixed-pitch-serif-width nil
	     :fixed-pitch-serif-height 1.0

	     :variable-pitch-family "Sans"
	     :variable-pitch-weight nil
	     :variable-pitch-slant nil
	     :variable-pitch-width nil
	     :variable-pitch-height 1.0

	     :mode-line-active-family nil
	     :mode-line-active-weight nil
	     :mode-line-active-slant nil
	     :mode-line-active-width nil
	     :mode-line-active-height 1.0

	     :mode-line-inactive-family nil
	     :mode-line-inactive-weight nil
	     :mode-line-inactive-slant nil
	     :mode-line-inactive-width nil
	     :mode-line-inactive-height 1.0

	     :header-line-family nil
	     :header-line-weight nil
	     :header-line-slant nil
	     :header-line-width nil
	     :header-line-height 1.0

	     :line-number-family nil
	     :line-number-weight nil
	     :line-number-slant nil
	     :line-number-width nil
	     :line-number-height 1.0

	     :tab-bar-family nil
	     :tab-bar-weight nil
	     :tab-bar-slant nil
	     :tab-bar-width nil
	     :tab-bar-height 1.0

	     :tab-line-family nil
	     :tab-line-weight nil
	     :tab-line-slant nil
	     :tab-line-width nil
	     :tab-line-height 1.0

	     :bold-family nil
	     :bold-weight bold
	     :bold-slant nil
	     :bold-width nil
	     :bold-height 1.0

	     :italic-family nil
	     :italic-weight nil
	     :italic-slant italic
	     :italic-width nil
	     :italic-height 1.0

	     :line-spacing nil)
	    
	    (regular
	     :default-height 100)

	    (large
	     :default-weight semilight
	     :default-height 140
	     :bold-weight extrabold)

	    (Iosevka
	     :default-family "Iosevka Nerd Font"
	     :default-height 110)

	    (Go
	     :default-family "GoMono Nerd Font"
	     :default-height 100
	     :mode-line-active-family "Iosevka Nerd Font")

	    (ETBembo
	     :default-family "Iosevka Nerd Font"
	     :default-height 110
	     :fixed-pitch-serif-family "ETBembo"
	     :fixed-pitch-serif-height 140
	     :variable-pitch-family "ETBembo"
	     :variable-pitch-height 140
	     )

	    (FiraCode
	     :default-family "FiraCode Nerd Font"
	     :default-height 110)

	    (MapleMono
	     :default-family "Maple Mono NF CN"
	     :default-height 110)

	    (JetBrainsMono
	     :default-family "JetBrainsMono Nerd Font"
	     :default-height 110)))

  (fontaine-set-preset (or (fontaine-restore-latest-preset) 'Go))
  (setopt fontaine-mode t)
  )

;;;; ef-themes                                                            :prot:
(use-package ef-themes
  :ensure
  :config
  (setopt ef-themes-to-toggle '(ef-reverie ef-dark))
  (setopt ef-themes-mixed-fonts t)
  (setopt ef-themes-variable-pitch-ui t)

  (load-theme 'ef-dark t)
  )

;;;; cursory                                                              :prot:
(use-package cursory :ensure)

;;;; pulsar                                                               :prot:
(use-package pulsar
  :ensure
  :config
  (setopt pulsar-global-mode t)
  )

;;;; logos                                                                :prot:
(use-package logos
  :after olivetti
  :ensure

  :config
  (setopt logos-outlines-are-pages t)
  (setopt logos-olivetti t)
  (setopt logos-hide-cursor nil)
  (setopt logos-hide-mode-line t)
  (setopt logos-hide-header-line t)
  (setopt logos-hide-buffer-boundaries t)
  (setopt logos-hide-fringe t)
  (setopt logos-variable-pitch t)
  (setopt logos-buffer-read-only nil)
  (setopt logos-scroll-lock nil)

  :bind
  (:map logos-focus-mode-map
	("]" . logos-forward-page-dwim)
	("[" . logos-backward-page-dwim)
	)
  )

;;;; olivetti
(use-package olivetti
  :ensure
  :bind
  (("C-c o" . olivetti-mode)))

;;;; rainbow-delimiters
(use-package rainbow-delimiters
  :ensure
  :hook prog-mode)

;;;; vertico-posframe
(use-package vertico-posframe
  :ensure
  :after vertico
  :config
  (setopt vertico-posframe-mode t))

;;;; which-key-posframe
(use-package which-key-posframe
  :ensure
  :after which-key
  :config
  (setopt which-key-posframe-mode t))

;;;; focus
(use-package focus
  :ensure
  )

;;;; spacious-padding                                                     :prot:
(use-package spacious-padding
  :ensure
  :after (ef-themes fontaine)
  :config
  (setopt spacious-padding-mode t)
  (setopt spacious-padding-subtle-mode-line t)
  )

;;;; lin                                                                  :prot:
(use-package lin
  :ensure
  :config
  (setopt lin-mode t)
  )

;;;; beframe                                                              :prot:
(use-package beframe
  :ensure)

;;;; vline
(use-package vline
  :ensure
  :hook (yaml-mode python-mode)
  )

;;; Navigation, Shell & Terminal

;;;; dired                                                             :builtin:
(use-package dired
  :config
  (setopt dired-listing-switches "-alh"))

;;;; eat
(use-package eat
  :ensure
  :config
  (setopt eat-term-name "linux"))

;;;; eshell
(use-package eshell
  :config
  (setopt eshell-scroll-show-maximum-output nil))

;;;; outshine
(use-package outshine
  :ensure
  :hook prog-mode
  :bind
  (:map outshine-mode-map
	("C-c @ c" . outshine-toggle-hidden-lines-cookies)
	("C-x n s" . outshine-narrow-to-subtree)
	))

;;;; which-key
(use-package which-key
  :config
  (setopt which-key-idle-delay 0.5)
  (setopt which-key-mode t))

;;;; zoxide
(use-package zoxide
  :ensure
  :pin melpa-stable
  :bind
  (("C-c z a" . zoxide-add)
   ("C-c z c" . zoxide-cd)
   ("C-c z r" . zoxide-remove)
   ("C-c z f" . zoxide-find-file)
   ("C-c z z" . zoxide-travel)
   ))

;;;; substitute                                                           :prot:
(use-package substitute
  :ensure
  :bind-keymap
  ("C-c s" . substitute-prefix-map)
  )

;;;; vterm
(use-package vterm
  :ensure
  :config
  ;; See https://github.com/akermu/emacs-libvterm?tab=readme-ov-file#how-can-i-get-the-directory-tracking-in-a-more-understandable-way
  (add-to-list 'vterm-eval-cmds '("update-pwd" (lambda (path) (setq default-directory path))))
  (add-to-list 'vterm-eval-cmds '("dired" dired))
  )

;; Local Variables:
;; mode: emacs-lisp
;; End:
